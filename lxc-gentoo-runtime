#!/bin/bash

#
# LXC template for gentoo
#
# Author: Guillaume Zitta <lxc@zitta.fr>
# Author: Stefan Langenmaier <stefan.langenmaier>
#
# Widely inspired from lxc-gentoo script at https://github.com/globalcitizen/lxc-gentoo
#
# this version installs a reduced version for a gentoo runtime
# this container won't be a self-sufficent gentoo installation
# it won't contain for example portage or gcc
#



# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

# Ensure strict root's umask doesen't render the VM unusable
umask 022

LXC_TEMPLATE_CONFIG="/usr/share/lxc/config"

################################################################################
#                        Various helper functions
################################################################################


# a die function is always a good idea
die()
{
    printf "\n[the last exit code leading to this death was: %s ]\n" "$?"
    local retval="$1"
    shift 1
    printf "$@"
    exit "$retval"
}

# gentoo arch/variant detection
set_default_arch()
{
    printf "### set_default_arch: default arch/variant autodetect...\n"
    arch=$(uname -m)
    if [[ $arch =~ i.86 ]]; then
        arch="x86"
        variant="x86"
    elif [[ $arch == "x86_64" ]]; then
        arch="amd64"
        variant="amd64"
    elif [[ $arch =~ arm.* ]]; then
        arch="arm"
        variant="armv7a"
    else
        #who knows, it may work...
        printf " => warn: unexpected arch:${arch} let me knows if it works :)\n"
        variant="${arch}"
    fi
    printf " => Got: arch=%s variant=%s\n" "${arch}" "${variant}"
}

store_user_message()
{
    user_message="${user_message}=> $@\n"
}


################################################################################
#                    CONTAINER Preparation
################################################################################

container_setup() {
    printf "##### container_setup(): starting container setup\n"

    #in most cases lxc-create should have provided a copy of default lxc.conf
    #let's tag where template starts, or just create the files
    echo '### lxc-gentoo-runtime template stuff starts here' >> "$path/config"

    #Determine rootfs
    #If backingstore was specified, lxc.rootfs should be present or --rootfs did the rootfs var creation
    if [ -z "${rootfs}" ]; then
        rootfs=`awk -F= '$1 ~ /^lxc.rootfs/ { print $2 }' "$path/config" 2>/dev/null`
        if [ -z "${rootfs}" ]; then
            #OK it's default
            rootfs="${path}/rootfs"
        fi
    fi
    store_user_message "rootfs of container is : ${rootfs}"
    store_user_message "config of container is : ${path}/config"

    container_conf &&
    conf_template
    
    if [ $? -ne 0 ]; then
        die 1 "container_setup(): one step didn't complete, sorry\n"
    fi

    printf "###### container_setup(): container should be ready to start!\n"
    printf "\n\n"
    printf "Before you can start the container with: lxc-start -n %s\n" "${name}"
    printf "You have to install a system\n"
    printf "Use the following ENV variables to configure emerge\n"
    printf "export ROOT=\"${rootfs}\"\n"
    printf "export PORTAGE_CONFIGROOT=\"${rootfs}\"\n"
    printf "little things you should know about your container:\n"
    printf "${user_message}"
    return 0
}

################################################################################
#                        lxc configuration files
################################################################################

container_conf()
{
    printf "container_configuration(): making lxc configuration file... \n"

    #at this point if there
    conf_file="${path}/config"

    if grep -q "^lxc.rootfs" "${conf_file}" ; then
        #lxc-create already provided one
        conf_rootfs_line=""
    else
        conf_rootfs_line="lxc.rootfs = $(readlink -f "${rootfs}")"
    fi
    
    #create portage config
    mkdir -p "${rootfs}"/etc/portage
    #make.conf
    cp /etc/portage/make.conf "${rootfs}/etc/portage"
    #make.globals
    #cp /etc/make.globals "${rootfs}/etc"
    #profile
    ln -sn /usr/portage/profiles/default/linux/amd64/13.0 "${rootfs}/etc/portage/make.profile"
    
    mkdir -p "${rootfs}/sys"
    mkdir -p "${rootfs}/dev"
    mkdir -p "${rootfs}/proc"
    
    #mkdir "${rootfs}/dev/pts"
    #mkdir "${rootfs}/dev/shm"
    #mkdir "${rootfs}/dev/mqueue"


    cat <<- EOF >> "${conf_file}"

# sets container architecture
# If desired architecture != amd64 or x86, then we leave it unset as
# LXC does not officially support anything other than x86 or amd64.
#${conf_arch_line}

# set the hostname
lxc.utsname = ${name}
lxc.tty = ${tty}
lxc.autodev = 1

${conf_rootfs_line}

#replace the following line with the line afterwards to have a simple network
##lxc.network.type = empty
#lxc.network.type = veth
#lxc.network.flags = up
#lxc.network.link = virbr0
##lxc.network.ipv4 = 0.0.0.0/24
##lxc.network.ipv4 = 192.168.122.93/24
#lxc.network.name = eth0
##lxc.network.hwaddr = 00:16:3e:20:3e:71
#lxc.network.mtu = 1500

lxc.include = ${LXC_TEMPLATE_CONFIG}/gentoo.${settings}.conf
EOF
    printf  " => done.\n"
}

conf_template()
{
    printf "### conf_template: copying files from a template folder...\n"
    
    if [[ -d "$template_dir" ]]; then
    	cp -aR "$template_dir/"* "${rootfs}/"
    fi

}


usage()
{
    cat <<EOF
$1 -h|--help [-a|--arch <arch>] [-v|--variant <variant>] [-P|--private-portage] [--portage-dir <protagedir>] [-t|--tarball <stage3file>]
 [-F|--flush-cache] [-c|--cache-only] [-u|--user <username>] [-w|--password <password>] [--autologin] [-S|--auth-key <keyfile>]
 [-s|--settings <name>] [-m|--mirror <gentoomirror>] [--tty <number>]

arch: the container architecture (e.g. amd64): defaults to host arch (currently: '${arch}')
    If you choose one that needs emulation
    tested: amd64, x86
    You could try any other gentoo arch, why not...

variant: gentoo's Architecture variant as of dec 2013 : (currently: '${variant}')
    for amd64 arch: amd64 (default), amd64-hardened+nomultilib, amd64-hardened, amd64-nomultilib, x32
    for x86 arch: i686 (default), i486, i686-hardened
    for arm arch: armv7a (default), armv7a_hardfp, armv6j, armv6j_hardfp, armv5tel, armv4tl

private-portage: by default, /usr/portage is mount-binded with host one if exists (currently: '${private_portage}')
    this force container to have his own copy

portage-dir: portage dir used for shared portage
    by default the host on if any (currently: '${portage_dir}')

tarball: force usage of local stage3 archive (currently: '${arch}')
    If empty, latest will be downloaded

flush-cache: do like there is no previous cache

cache-only: just ensure cache is present
    if cache exists and "flush-cache" not specified, does nothing

user: user used in auth oriented options (currently: '${user}')

password: password for user (currently: '${password}')
    if default, usage of auth-key will disable password setting

autologin: enable autologin for user (currently: '${autologin}')
    This unset default password setting

auth-key: SSH Public key file to inject into container for user (currently: '${auth_key}')
    This unset default password setting

settings: choose common configuration (currently: '${settings}')
    see ${LXC_TEMPLATE_CONFIG}/gentoo.*.conf
    Available settings:
    $(ls -1 ${LXC_TEMPLATE_CONFIG}/gentoo.*.conf | xargs basename -a -s .conf | sed 's/^gentoo.//')

mirror: gentoo mirror for download (currently: '${mirror}')

tty: number of tty (6 max) (currently: '${tty}')
EOF
    exit 0
}

#some overridable defaults
set_default_arch

mirror="http://distfiles.gentoo.org"
user="root"
password="toor"
tty=1
settings="common"
options=$(getopt -o hp:n:a:FcPv:t:S:u:w:T:s:m: -l help,rootfs:,path:,name:,arch:,flush-cache,cache-only,private-portage,variant:,portage-dir:,tarball:,auth_key:,user:,autologin:,password:,template:,settings:,mirror:,tty: -- "$@")

eval set -- "$options"

while true
do
    case "$1" in
    -h|--help)             usage $0 && exit 0;;
    --rootfs)              rootfs=$2; shift 2;;
    -p|--path)             path=$2; shift 2;;
    -n|--name)             name=$2; shift 2;;
    -a|--arch)             arch=$2; shift 2;;
    -F|--flush-cache)      flush_cache=1; shift 1;;
    -c|--cache-only)       cache_only=1; shitf 1;;
    -P|--private-portage)  private_portage=1; shift 1;;
    -v|--variant)          variant=$2; shift 2;;
    --portage-dir)         portage_dir=$2; shift 2;;
    -t|--tarball)          tarball=$2; shift 2;;
    -S|--auth-key)         auth_key=$2; shift 2;;
    -u|--user)             user=$2; shift 2;;
    -w|--password)         forced_password=1; password=$2; shift 2;;
    -T|--template)         use_template=1; template_dir=$2; shift 2;;
    -s|--settings)         settings=$2; shift 2;;
    -m|--mirror)           mirror=$2; shift 2;;
    --tty)                 [[ $2 -lt 6 ]] && tty=$2; shift 2;;
    --autologin)            autologin=1; shift 1;;
    --) shift 1; break ;;
    *)           break ;;
    esac
done

container_setup
